(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{604:function(t,a,e){"use strict";e.r(a);var v=e(17),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"这是four"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这是four"}},[t._v("#")]),t._v(" 这是four")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("为什么有的编程规范要求用void 0 代替 undefined?")])]),t._v(" "),e("li",[e("p",[t._v("字符串有最大长度吗？\nString 的最大长度为 2^53-1\n字符串的UTF16编码的最大长度是 65535")])]),t._v(" "),e("li",[e("p",[t._v("0.1 + 0.2 = 0.3 ?为什么js中不是这样？")])]),t._v(" "),e("li",[e("p",[t._v("es6新加入的Symbol是什么东西？")])]),t._v(" "),e("li",[e("p",[t._v("为什么给对象添加的方法能用在基本类型上？")])])]),t._v(" "),e("h1",{attrs:{id:"类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),e("p",[t._v("String\nNumber\nBoolean\nUndefined\nNull\nSymbol\nBigInt")]),t._v(" "),e("p",[t._v("Object")]),t._v(" "),e("h1",{attrs:{id:"对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),e("p",[t._v("如何定义面向对象和基于对象的问题")]),t._v(" "),e("p",[t._v("语言和宿主的基础设施有对象来提供，并且JavaScript程序也是一系列相互通信的对象集合")]),t._v(" "),e("h1",{attrs:{id:"什么是面向对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象"}},[t._v("#")]),t._v(" 什么是面向对象？")]),t._v(" "),e("p",[t._v("Object 是一切事物的总称")]),t._v(" "),e("h1",{attrs:{id:"对象的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的特性"}},[t._v("#")]),t._v(" 对象的特性")]),t._v(" "),e("ol",[e("li",[t._v("要具有唯一标识性: 即使两个完全相同的对象，也并非同一个对象")]),t._v(" "),e("li",[t._v("要具有状态： 同一个对象可能处于不同的状态之下")]),t._v(" "),e("li",[t._v("具有行为： 对象的状态可能因为他的行为产生变迁")])]),t._v(" "),e("h1",{attrs:{id:"对象的两类属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的两类属性"}},[t._v("#")]),t._v(" 对象的两类属性")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("数据属性\nvalue： 就是属性的值\nwritable： 属性能否被赋值\nenumerable： 属性能否被for in 枚举\nconfigurable： 属性能否被删除或者修改")])]),t._v(" "),e("li",[e("p",[t._v("访问器属性\ngetter：在取属性值是被调用\nsetter：在设置属性值是被调用\nenumerable： 属性能否被for in 枚举\nconfigurable： 属性能否被删除或者修改")])])]),t._v(" "),e("h1",{attrs:{id:"什么是前端路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是前端路由"}},[t._v("#")]),t._v(" 什么是前端路由")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("路由的概念是服务器上，URL和处理函数的映射关系")])]),t._v(" "),e("li",[e("p",[t._v("前端路由是在单页应用中体现小数的是URL和UI也免得映射关系， 即URL变了一起UI更新(无需刷新页面)")])])]),t._v(" "),e("h1",{attrs:{id:"如何实现前端路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现前端路由"}},[t._v("#")]),t._v(" 如何实现前端路由")]),t._v(" "),e("ol",[e("li",[t._v("如何改变URL却不引起页面的刷新")]),t._v(" "),e("li",[t._v("如何检测到URL变化了")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("hash 实现： hash是URL中#后面的那一部分，改变url的hash， 页面不刷新")])]),t._v(" "),e("li",[e("p",[t._v("hashchange 可以监听 url 变化")])]),t._v(" "),e("li",[e("p",[t._v("history 实现:是HTML提供的一个对象， 其中提供了 pushState 和 replaceState 两个方法可以改变URL且不引起页面刷新")])]),t._v(" "),e("li",[e("p",[t._v("popstate 可以监听 pushState 和 replaceState 的 URL变化")])]),t._v(" "),e("li",[e("p",[t._v("pushState 和 replaceState 的调用和 a 标签的点击事件是可以被拦截的")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);